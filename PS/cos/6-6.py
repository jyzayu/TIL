# 모든 한 칸에 대해서   한 칸 길이로 접었을 때 가로로 접었을 떄랑 세로로 접었을 떄 비교한다.
#  두칸 길이로 접었을 떄 가로로 접었을 떄 세로로 접었을 때 중 최대 값을 비교한다. 


# 한칸 두칸 모두 비교해봐야겠다 생각했는데 이게 붙어있는 것만 하는게 아니라서   
# 2칸 씩 떨어진 것을 어떻게 반복문으로 하나 했는데  for k in range(j + 1, 4, 2)?  

# 두칸 떨어졌으니 2씩 더하게 하고    1칸과 2칸을 비교한게 아니라 가로 접었을 때 세로 접었을 때 이렇게 해야 
#반복문으로 순차적으로 하기 좋네  1칸 했다가 2칸하고   1칸했다가 2칸하면     순서 꼬이잖아
#1칸 가로세로   2칸 가로세로하면 for k in range(j + 1, 4, 2)로 나타낼 수 있는데 


# 1zks

# 모든 한칸에 대해 이렇게 한칸 두칸 접었을 때 나오는 계산을 직접 작성했네 
def solution(grid):
    answer = 0
    for i in range(4):
        for j in range(4):
            for k in range(j + 1, 4, 2):
                # 0, 2, 3
                #max( 02 + 23, 23 + 30 )

                # 0 0 1,  0 0 3
                # max( 00 + 01, 01 + 10)  max( 00 + 03 , 03 + 30)
                answer = max(answer, max(grid[i][j] + grid[j][k], grid[i][j] + grid[k][i]))
    return answer

#아래는 테스트케이스 출력을 해보기 위한 코드입니다. 아래에는 잘못된 부분이 없으니 위의 코드만 수정하세요.
grid = [[1, 4, 16, 1], [20, 5, 15, 8], [6, 13, 36, 14], [20, 7, 19, 15]]
ret = solution(grid)

#[실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
print("solution 함수의 반환 값은", ret, "입니다.")
